
#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Информация = НСтр("ru = 'Загрузка стандартов ИТС для программы Система проектирования прикладных решений'");
	ПараметрыРегистрации.Версия = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Открытие формы ""Загрузка стандартов ИТС""";
	НоваяКоманда.Идентификатор = "ОткрытиеФормы_ЗагрузкаСтандартовИТС";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Если НЕ ФункционалСППРДоступен() Тогда
		Возврат ПараметрыРегистрации;
	КонецЕсли;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Регламентное задание ""Загрузка стандартов ИТС""";
	НоваяКоманда.Идентификатор = "РегламентноеЗадание_ЗагрузкаСтандартовИТС";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ИдентификаторКоманды = "РегламентноеЗадание_ЗагрузкаСтандартовИТС" Тогда
		Если Не ФункционалСППРДоступен() Тогда
			Возврат;
		КонецЕсли;
		
		КвалификаторыСтроки = Новый КвалификаторыСтроки(127);
		ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка", , КвалификаторыСтроки);
		
		ДеревоСтандартов = Новый ДеревоЗначений;
		ДеревоСтандартов.Колонки.Добавить("СтандартОбработан", Новый ОписаниеТипов("Булево"));
		ДеревоСтандартов.Колонки.Добавить("Заголовок", ОписаниеТипаСтрока);
		ДеревоСтандартов.Колонки.Добавить("Адрес", ОписаниеТипаСтрока);
		ДеревоСтандартов.Колонки.Добавить("КонечныйАдрес", ОписаниеТипаСтрока);
		ДеревоСтандартов.Колонки.Добавить("КодСтандарта", ОписаниеТипаСтрока);
		ДеревоСтандартов.Колонки.Добавить("Стандарт", Новый ОписаниеТипов("СправочникСсылка.СтандартыРазработки"));
		
		НовСтрока = ДеревоСтандартов.Строки.Добавить();
		НовСтрока.Заголовок = "Стандарты ИТС";
		НовСтрока.Адрес = АдресСтандартовПоУмолчанию();
		
		АнализРекурсивно(НовСтрока);
		АктуализироватьСтандартыРекурсивно(НовСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция АдресСтандартовПоУмолчанию() Экспорт
	Возврат "https://its.1c.ru/db/v8std";
КонецФункции

Функция ФункционалСППРДоступен() Экспорт
	
	Если Метаданные.Справочники.Найти("СтандартыРазработки") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ Метаданные.Справочники["СтандартыРазработки"].Реквизиты.Найти("СсылкаНаСтандарт") = Неопределено;
	
КонецФункции

Процедура АнализРекурсивно(ДеревоРодитель) Экспорт 
	
	ДанныеАдреса = ДанныеРесурса(ДеревоРодитель. Адрес);
	ДеревоРодитель.КодСтандарта = ДанныеАдреса.КодСтандарта;
	
	Если ДанныеАдреса.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ДеревоРодитель.Адрес, "hdoc") Тогда
		ДеревоРодитель.КонечныйАдрес = ДанныеАдреса.КонечныйАдрес;
		Возврат;
	КонецЕсли;
	
	ДеревоРодитель.КонечныйАдрес = ДанныеАдреса.Адрес;
	
	СоответствиеЗаголовокАдрес = ДанныеАдреса.ВложенныеСсылки;
	Если СоответствиеЗаголовокАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеЗаголовокАдрес Цикл
		
		НовСтрока = ДеревоРодитель.Строки.Добавить();
		НовСтрока.Адрес = КлючЗначение.Значение;
		НовСтрока.Заголовок = КлючЗначение.Ключ;
		
		АнализРекурсивно(НовСтрока);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура АктуализироватьСтандартыРекурсивно(ДеревоРодитель, ТолькоСоздаватьНовые = Ложь) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоРодитель.Строки Цикл
		
		ЭтоГруппа = НЕ СтрокаДерева.Строки.Количество() = 0;
		
		Если НЕ ЭтоГруппа Тогда
			СоздатьОбновитьСтандарт(СтрокаДерева, ТолькоСоздаватьНовые);
			Продолжить;
		КонецЕсли;
		
		СоздатьОбновитьГруппуСтандартов(СтрокаДерева, ТолькоСоздаватьНовые);
		
		АктуализироватьСтандартыРекурсивно(СтрокаДерева);
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ДанныеРесурса(АдресРесурса, Таймаут = 10, Повторно = Ложь)
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("Адрес", АдресРесурса);
	ДанныеАдреса.Вставить("КодСостояния", Неопределено);
	ДанныеАдреса.Вставить("Заголовок", "");
	ДанныеАдреса.Вставить("Ошибка", Ложь);
	ДанныеАдреса.Вставить("ТекстОшибки", "");
	ДанныеАдреса.Вставить("КонечныйАдрес", "");
	ДанныеАдреса.Вставить("АдресСервера", "");
	ДанныеАдреса.Вставить("ВложенныеСсылки", Новый Соответствие);
	ДанныеАдреса.Вставить("КодСтандарта", "");
	
	СтруктураURI = СтруктураURI(АдресРесурса);
	
	ДанныеАдреса.АдресСервера = СтруктураURI.Схема + "://" + СтруктураURI.ИмяСервера;

	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , , Таймаут);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	
	Попытка
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		
		// Если не достучались попробуем повторно и увеличим таймаут
		Если Не Повторно Тогда
			Возврат ДанныеРесурса(АдресРесурса, Таймаут * 2, Истина);
		КонецЕсли;
		
		ТекстОшибки = ОписаниеОшибки();
		
		ДанныеАдреса.Ошибка = Истина;
		ДанныеАдреса.ТекстОшибки = ТекстОшибки;
		
		ЗаписьЖурналаРегистрации("Ошибка получения стандарта с ИТС", 
									УровеньЖурналаРегистрации.Ошибка, , 
									АдресРесурса, 
									ТекстОшибки);
		Возврат ДанныеАдреса;
	КонецПопытки; 
	
	ДанныеАдреса.КодСостояния = Результат.КодСостояния;
	
	// Обрабатываем отсутствие страницы
	Если Результат.КодСостояния = 404 Тогда
		
		ДанныеАдреса.Ошибка = Истина;
		ДанныеАдреса.ТекстОшибки = "Страница не найдена";
		
		Возврат ДанныеАдреса;
	КонецЕсли;
	
	// Обрабатываем перенаправление
	Если Результат.КодСостояния = 302 Тогда
		АдресРесурса = Результат.Заголовки.Получить("Location");
		Если АдресРесурса = Неопределено Тогда
			ДанныеАдреса.Ошибка = Истина;
			ДанныеАдреса.ТекстОшибки = "Перенаправление: сервер не сообщил адрес ресурса!";
		КонецЕсли;
		
		Возврат ДанныеРесурса(АдресРесурса);
	КонецЕсли;
	
	ТелоОтвета = Результат.ПолучитьТелоКакСтроку();
	
	ДанныеАдреса.Заголовок = ПоискЗаголовка(ТелоОтвета);
	ДанныеАдреса.КонечныйАдрес = ДанныеАдреса.АдресСервера + "/" + ПоискКонечногоАдреса(ТелоОтвета);
	ДанныеАдреса.ВложенныеСсылки = ПоискВложенныхСсылок(ТелоОтвета, ДанныеАдреса.АдресСервера);
	ДанныеАдреса.КодСтандарта = ПоискКодаСтандарта(АдресРесурса);
	
	Возврат ДанныеАдреса;
	 
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ПоискВложенныхСсылок(Знач Текст, Знач АдресСервера = "") 

	Соответствие = Новый Соответствие;
	
	// Обрезаем всё до "nav list", чтобы было меньше мусора
	Текст = Сред(Текст, СтрНайти(Текст, "class=""nav list""") - 5, СтрДлина(Текст));
	
	// Ищем все href в блоке <a ... /a>"
	РегулярноеВыражение = "<a\s+href=""([^""]*)"">([^<]*)<\/a>";
	
	МассивРезультат = СтрНайтиВсеПоРегулярномуВыражению(Текст, РегулярноеВыражение);
	Для Каждого Результат Из МассивРезультат Цикл
		
		СтрокаЗначение = Результат.Значение;
		
		Начало = СтрНайти(СтрокаЗначение, "href=");
		Если Начало = 0 Тогда
			Продолжить;
		КонецЕсли;
		Начало = Начало + 6;
		Конец = СтрНайти(СтрокаЗначение, ">") - 1; 
		
		Адрес = Сред(СтрокаЗначение, Начало, Конец - Начало);
		
		СтрокаЗначение = Сред(СтрокаЗначение, Конец, СтрДлина(СтрокаЗначение));
		
		Начало = СтрНайти(СтрокаЗначение, ">");
		Если Начало = 0 Тогда
			Продолжить;
		КонецЕсли;
		Начало = Начало + 1;
		Конец = СтрНайти(СтрокаЗначение, "<");
		Заголовок = Сред(СтрокаЗначение, Начало, Конец - Начало);
		Заголовок = СтрЗаменить(Заголовок, "&quot;", "");
		
		Соответствие.Вставить(Заголовок, АдресСервера + Адрес);
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ПоискЗаголовка(Текст) 
	
	// Ищем title в блоке <h1 ... >"
	РегулярноеВыражение = "<h1[^>]*title=""([^""]*)""[^>]*>";
	
	Значение = СтрНайтиПоРегулярномуВыражению(Текст, РегулярноеВыражение).Значение;
	Значение = СтрЗаменить(Значение, "&quot;", "");
	Значение = Сред(Значение, СтрНайти(Значение, "title") + 7, СтрДлина(Значение));
	Значение = Лев(Значение, СтрДлина(Значение) - 2);
	
	Возврат Значение;
	
КонецФункции

Функция ПоискКодаСтандарта(Текст) 
	
	// Ищем всё что находится между content и hdoc 
	РегулярноеВыражение = "content/(\d\s*)+/hdoc";
	
	Значение = СтрНайтиПоРегулярномуВыражению(Текст, РегулярноеВыражение).Значение;
	Значение = СтрЗаменить(Значение, "&quot;", "");
	Значение = СтрЗаменить(Значение, "content/", "");
	Значение = СтрЗаменить(Значение, "/hdoc", "");
	Значение = СтрЗаменить(Значение, " ", "");
	
	Возврат Значение;
	
КонецФункции

Функция ПоискКонечногоАдреса(Текст) 
	
	// Ищем href в блоке <base ... >"
	РегулярноеВыражение = "<base[^>]*id=[^>]*href=""([^""]*)""";
	
	Значение = СтрНайтиПоРегулярномуВыражению(Текст, РегулярноеВыражение).Значение;
	Значение = СтрЗаменить(Значение, "&quot;", "");
	Значение = Сред(Значение, СтрНайти(Значение, "href=") + 7, СтрДлина(Значение));
	Значение = Лев(Значение, СтрДлина(Значение) - 1);
	
	Возврат Значение;
	
КонецФункции

#Область АктуализацияСправочникаСтандарты

&НаСервере
Процедура СоздатьОбновитьСтандарт(СтрокаДерева, ТолькоСоздаватьНовые = Ложь)
	
	ДлинаКода = 9;
	ШаблонКода = "ИТС000000" + СтрокаДерева.КодСтандарта;
	КодСтандарта = Лев(ШаблонКода, 3) + Прав(ШаблонКода, 6);
	
	СтандартСсылка = Справочники.СтандартыРазработки.НайтиПоКоду(КодСтандарта);
	
	Если Не ЗначениеЗаполнено(СтандартСсылка) Тогда
		СтандартСсылка = СтандартПоНаименованию(СтрокаДерева.Заголовок);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтандартСсылка) Тогда
		СтрокаДерева.Стандарт = СтандартСсылка;
		
		Если СтрокаДерева.СтандартОбработан ИЛИ ТолькоСоздаватьНовые Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			СтандартОбъект = СтандартСсылка.ПолучитьОбъект();
		Исключение 
			ЗаписьЖурналаРегистрации("Ошибка получения объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
	Иначе
		СтандартОбъект = Справочники.СтандартыРазработки.СоздатьЭлемент();
		СтандартОбъект.Код = КодСтандарта;
		СтандартОбъект.Внешний = Истина;
		СтандартОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	СтандартОбъект.ДатаИзменения = ТекущаяДатаСеанса();
	СтандартОбъект.Наименование = СтрокаДерева.Заголовок;
	
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		СтандартОбъект.Родитель = СтрокаДерева.Родитель.Стандарт;
	КонецЕсли;
	
	СтандартОбъект.СсылкаНаСтандарт = СтрокаДерева.Адрес;
	
	Попытка
		СтандартОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка записи объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтрокаДерева.СтандартОбработан = Истина;
	СтрокаДерева.Стандарт = СтандартОбъект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьГруппуСтандартов(СтрокаДерева, ТолькоСоздаватьНовые = Ложь)
	
	СтандартСсылка = СтандартПоНаименованию(СтрокаДерева.Заголовок, Истина);
	
	СтандартОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(СтандартСсылка) Тогда
		СтрокаДерева.Стандарт = СтандартСсылка;
		
		Если СтрокаДерева.СтандартОбработан ИЛИ ТолькоСоздаватьНовые Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			СтандартОбъект = СтандартСсылка.ПолучитьОбъект();
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка получения объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	Иначе
		СтандартОбъект = Справочники.СтандартыРазработки.СоздатьГруппу();
	КонецЕсли;
	
	СтандартОбъект.Наименование = СтрокаДерева.Заголовок;
	
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		СтандартОбъект.Родитель = СтрокаДерева.Родитель.Стандарт;
	КонецЕсли;
	
	СтандартОбъект.СсылкаНаСтандарт = СтрокаДерева.Адрес;

	Попытка
		СтандартОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка записи объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтрокаДерева.СтандартОбработан = Истина;
	СтрокаДерева.Стандарт = СтандартОбъект.Ссылка;
	
КонецПроцедуры

&НаСервере
Функция СтандартПоНаименованию(Заголовок, ЭтоГруппа = Ложь)
	
	Перем Выборка, Запрос;
	
	// Тех. долг. Запрос в цикле.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	|	СтандартыРазработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтандартыРазработки КАК СтандартыРазработки
	|ГДЕ
	|	СтандартыРазработки.ЭтоГруппа = &ЭтоГруппа
	|	И СтандартыРазработки.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	Запрос.УстановитьПараметр("Наименование", Заголовок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.СтандартыРазработки.ПустаяСсылка();

КонецФункции 

#КонецОбласти

#КонецОбласти
